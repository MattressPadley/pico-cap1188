#!/bin/bash

# setup-clangd.sh - Dynamic clangd configuration generator for ARM cross-compilation
# This script detects the ARM toolchain installation and generates a .clangd config

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CLANGD_CONFIG="$PROJECT_ROOT/.clangd"

echo -e "${BLUE}üîß Setting up clangd configuration for ARM cross-compilation...${NC}"

# Function to find ARM toolchain
find_arm_toolchain() {
    local arm_gcc_path
    
    # Try to find arm-none-eabi-g++ in PATH
    if arm_gcc_path=$(which arm-none-eabi-g++ 2>/dev/null); then
        echo "Found ARM toolchain at: $arm_gcc_path"
        return 0
    else
        echo -e "${RED}‚ùå Error: arm-none-eabi-g++ not found in PATH${NC}"
        echo "Please install the ARM toolchain:"
        echo "  - macOS: Download from https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads"
        echo "  - Linux: apt-get install gcc-arm-none-eabi"
        echo "  - Or add existing installation to PATH"
        return 1
    fi
}

# Function to get ARM toolchain include paths
get_arm_includes() {
    local includes
    echo -e "${YELLOW}üîç Detecting ARM toolchain include paths...${NC}" >&2
    
    # Get include paths from the ARM compiler itself
    includes=$(arm-none-eabi-g++ -mcpu=cortex-m0plus -mthumb -v -E -x c++ - < /dev/null 2>&1 | \
        sed -n '/#include <...> search starts here:/,/End of search list./p' | \
        grep -E "^\s+" | \
        sed 's/^[ \t]*//' | \
        grep -v "End of search list")
    
    if [ -z "$includes" ]; then
        echo -e "${RED}‚ùå Error: Could not detect ARM toolchain include paths${NC}" >&2
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Found ARM include paths:${NC}" >&2
    echo "$includes" | sed 's/^/  /' >&2
    echo "$includes"
}

# Function to get target triple and architecture info
get_target_info() {
    echo -e "${YELLOW}üéØ Detecting target architecture...${NC}" >&2
    
    # Get target info from ARM compiler
    local target_info
    target_info=$(arm-none-eabi-g++ -mcpu=cortex-m0plus -mthumb -dumpmachine 2>/dev/null || echo "arm-none-eabi")
    echo -e "${GREEN}‚úÖ Target: $target_info${NC}" >&2
    echo "$target_info"
}

# Function to generate .clangd configuration
generate_clangd_config() {
    local arm_includes="$1"
    local target="$2"
    
    echo -e "${YELLOW}üìù Generating .clangd configuration...${NC}"
    
    cat > "$CLANGD_CONFIG" << EOF
# Generated by scripts/setup-clangd.sh
# Run 'just setup-clangd' to regenerate

CompileFlags:
  # Use the existing compile_commands.json
  CompilationDatabase: build/
  
  # Add ARM-specific system includes (auto-detected)
  Add:
    # Target triple for ARM cross-compilation
    - --target=$target
EOF

    # Add each include path
    while IFS= read -r include_path; do
        if [ -n "$include_path" ]; then
            echo "    - -isystem$include_path" >> "$CLANGD_CONFIG"
        fi
    done <<< "$arm_includes"

    # Add the rest of the configuration
    cat >> "$CLANGD_CONFIG" << 'EOF'
    
    # ARM Cortex-M0+ specific flags
    - -mcpu=cortex-m0plus
    - -mthumb
    - -mfloat-abi=soft
    - -march=armv6s-m
    
    # Embedded-specific defines
    - -DPICO_BUILD=1
    - -DPICO_ON_DEVICE=1
    - -DPICO_RP2040=1
    - -DCAP1188_VERSION_MAJOR=0
    - -DCAP1188_VERSION_MINOR=0
    - -DCAP1188_VERSION_PATCH=1
    
    # C++ standard
    - -std=gnu++17
    
    # Disable exceptions and RTTI for embedded
    - -fno-exceptions
    - -fno-rtti

  # Remove problematic flags that clang doesn't understand
  Remove:
    - -mlibarch=*
    - -Wno-psabi
    - -fno-unwind-tables
    - -fno-use-cxa-atexit
    - -ffunction-sections
    - -fdata-sections

# Configure clang-tidy
Diagnostics:
  # Disable some diagnostics that are not relevant for embedded
  Suppress:
    - misc-non-private-member-variables-in-classes
    - readability-magic-numbers
    - cppcoreguidelines-avoid-magic-numbers
    - modernize-use-trailing-return-type
    
# Index configuration
Index:
  # Use project source files
  Background: Build
EOF
    
    echo -e "${GREEN}‚úÖ Generated .clangd configuration at: $CLANGD_CONFIG${NC}"
}

# Function to verify the configuration
verify_config() {
    echo -e "${YELLOW}üîç Verifying clangd configuration...${NC}"
    
    # Check if build directory and compile_commands.json exist
    if [ ! -d "$PROJECT_ROOT/build" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: build/ directory not found. Run 'just build' first.${NC}"
        return 0
    fi
    
    if [ ! -f "$PROJECT_ROOT/build/compile_commands.json" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: compile_commands.json not found. Run 'just build' first.${NC}"
        return 0
    fi
    
    # Test with a simple header file if it exists
    local test_file="$PROJECT_ROOT/include/cap1188/cap1188.hpp"
    if [ -f "$test_file" ]; then
        echo -e "${BLUE}üß™ Testing configuration with: $test_file${NC}"
        if clangd --check="$test_file" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ clangd configuration test passed!${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  clangd test had warnings, but configuration was generated${NC}"
        fi
    fi
}

# Main execution
main() {
    echo -e "${BLUE}üöÄ Starting clangd setup for pico-cap1188 project${NC}"
    
    # Check if we're in the right directory
    if [ ! -f "$PROJECT_ROOT/CMakeLists.txt" ] || [ ! -d "$PROJECT_ROOT/include/cap1188" ]; then
        echo -e "${RED}‚ùå Error: This doesn't appear to be the pico-cap1188 project root${NC}"
        echo "Please run this script from the project root or scripts/ directory"
        exit 1
    fi
    
    # Find ARM toolchain
    if ! find_arm_toolchain; then
        exit 1
    fi
    
    # Get toolchain information
    local arm_includes target
    if ! arm_includes=$(get_arm_includes); then
        exit 1
    fi
    
    target=$(get_target_info)
    
    # Generate configuration
    generate_clangd_config "$arm_includes" "$target"
    
    # Verify the configuration
    verify_config
    
    echo -e "${GREEN}üéâ clangd setup complete!${NC}"
    echo -e "${BLUE}üí° Next steps:${NC}"
    echo "  1. Restart your editor/IDE to pick up the new configuration"
    echo "  2. If using VS Code, make sure the clangd extension is installed"
    echo "  3. Run 'just build' if you haven't already to generate compile_commands.json"
    echo "  4. Open any .cpp/.hpp file to test IntelliSense"
}

# Run main function
main "$@"